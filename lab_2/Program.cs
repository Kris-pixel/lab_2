using System;

namespace lab_2
{
    class Program
    {
        static void Main(string[] args)
        {
            //задание 1
            //Byte хранит целое число от 0 до 255 и занимает 1 байт
            //SByte хранит целое число от -128 до 127 и занимает 1 байт
            //Int16 хранит целое число от -32768 до 32767 и занимает 2 байта
            Int32 intType = 49;  //хранит целое число от -2147483648 до 2147483647 и занимает 4 байта
            Int64 longType = 795487658784986866L; //хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт
            //UInt16 ранит целое число от 0 до 65535 и занимает 2 байта
            UInt32 uintType = 7654U;  //хранит целое число от 0 до 4294967295 и занимает 4 байта
            UInt64 ulongType = 879065UL;   //хранит целое число от 0 до 18 446 744 073 709 551 615 и занимает 8 байт
            Char charType = 'g'; //хранит одиночный символ в кодировке Unicode и занимает 2 байта
            Boolean boolType = true;
            Single FloatType = 0.6F; //хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта
            Double doubleType = 3.9867575;   //хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта
            Decimal decimalType = 60.00000M; //Данный тип данных, в основном, используется в финансовых расчетах. Он имеет разрядность 127 бит, что позволяет ему представлять числа с точностью до 28 десятичных разрядов
            String stringType = "Midnight";
            Object objectType = "this is object";    //может хранить значение любого типа данных и занимает 4 байта на 32-разрядной платформе и 8 байт на 64-разрядной платформе

            //5 операций явного приведения
            Byte b = (Byte)intType;
            SByte sb = (SByte)intType;
            int s = (int)charType;
            Int16 i16 = (Int16)FloatType;
            UInt16 uToU = (UInt16)uintType;

            //5 неявных преобразований
            Int64 l = intType;
            float iToF = longType;
            double dToF = FloatType;
            UInt64 u32ToI = uintType;
            int chToI = charType;

            //упаковка/распаковка
            int i = 1456;
            object oI = i; //Когда любой значимый тип присваивается к ссылочному типу данных, значение перемещается из области стека в кучу

            int i2 = (int)oI;   //Когда любой ссылочный тип присваивается к значимому типу данных, значение перемещается из области кучи в стек

            //работа с неявно типизированной переменной
            var amount = 3.67;
            Type amountType = amount.GetType();
            Console.WriteLine("Тип amount: {0}", amountType);   //Единственное отличие неявно типизированной переменной от обычной, явно типизированной переменной, — в способе определения ее типа. Как только этот тип будет определен, он закрепляется за переменной до конца ее существования.

            //nullable
            Nullable<int> ni = 45;
            Nullable<Double> nd = null;
            Console.WriteLine(ni.Value);
            Console.WriteLine(ni.HasValue);
            Console.WriteLine(nd.Value);
            Console.WriteLine(nd.HasValue);

            //задание 2

        }
    }
}
